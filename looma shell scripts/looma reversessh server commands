#!/bin/bash
#
# "looma" script to be run on reverse SSH server for accessing remote Loomas
#     see help() below for paramaters

help () {
  echo "usage:"
  echo "  looma               [same as 'looma help']"
  echo "  looma help          [explains options]"
  echo "  looma ports         [list ports with tunnels to remote Loomas]"
  echo "  looma remotes       [list registered remote Loomas by ID]"
  echo "  looma connected     [list remote Loomas that are currently connected]"
  echo "  looma access port <port-number> [login to a remote looma by port number]"
  echo "  looma access <ID>   [login to a remote looma by ID]"
  echo "  looma info <ID>     [retrieve 'info' file from remote looma]"
  echo "  looma recover <ID>  [copy 'loomaupdate' script to remote looma]"
  echo "  looma addremote <ID>    [add a new remote looma]"
  echo "  looma deleteremote <ID> [delete a remote looma]"
  exit
}

getID () {
  # look up remoteID for $port
  ID=$(sudo netstat -antp | grep "127\.0\.0\.1:$port" | sed -n 's/.*sshd: \(.*\)/\1/p')
  if [[  $ID = "" ]]
  then
    echo "Port $port has no remote Looma connected"
    ID="not connected"
  fi
  echo "ID for port $port is $ID"
}

getport () {
  # look up port # for $ID
  #port=$(netstat -antp | grep "127\.0\.0\.1.*sshd: $ID" | sed -p 's/127\.0\.0\.1:\([0-9]{5}\)/\1/p')
  port=$(sudo netstat -antp | grep "127\.0\.0\.1.*sshd: $ID" | sed -n 's/.*127\.0\.0\.1:\([0-9][0-9][0-9][0-9][0-9]\).*/\1/p')

  if [[ $port = "" ]]
  then
    port="not connected"
  fi

  if [[ ! $2 = "quiet" ]]
  then
     echo "port for remoteID $ID is $port"
  fi
}

validID () {
  # verify that $1 is a legal remoteID (format is "rxxxx")
  regex="^r[0-9]{4}$"
  if [[ ! $1 =~ $regex ]]
  then
     echo "$1 is not a legal remoteID. must be format 'rxxxx'"
     exit
  fi
}

info () {
  validID $ID
  getport $ID
  if [[ $port = "not connected" ]]
  then
    echo "Remote $ID is not connectd now"
    exit
  fi
  echo "retrieving info from remote Looma $ID on port $port"

  # get from remote Looma: /var/www/html/info file contents, Looma Version, and archivetimestamps for code and content

  scp -q -P $port -i ~/.ssh/$ID-id_rsa "odroid@127.0.0.1:/var/www/html/info"  /tmp/info
  info=$(cat /tmp/info)
  echo "    Looma info:   "
  echo $info

  scp -q -P $port -i ~/.ssh/$ID-id_rsa 'odroid@127.0.0.1:/var/www/html/Looma/includes/looma-version'  /tmp/info
  info=$(cat /tmp/info)
  echo "    Looma version:  $info"

  scp -q -P $port -i ~/.ssh/$ID-id_rsa 'odroid@127.0.0.1:/var/www/html/Looma/archivetimestamp.txt'    /tmp/timestamp
  timestamp=$(cat /tmp/timestamp)
  echo -n "    Last code update:    "
  date -d "@$timestamp"   "+%F %T"

  scp -q -P $port -i ~/.ssh/$ID-id_rsa 'odroid@127.0.0.1:/var/www/html/content/archivetimestamp.txt'  /tmp/timestamp
  timestamp=$(cat /tmp/timestamp)
  echo -n "    Last content update: "
  date -d "@$timestamp"   "+%F %T"
}

ports () {
  sudo netstat -antp | grep LISTEN | grep 127.0.0.1:[0-9][0-9][0-9][0-9][0-9]
  exit
}

remotes () {
#  echo "these remote IDs are in use:"

  cat /etc/passwd | grep ^r[0-9]* | sed -n  's/.*\/home\/\(r[0-9][0-9][0-9][0-9]\).*/\1/p' |  \
    while read ID; do getport $ID quiet; echo "$ID:$port"; done | sort



#  cat | grep | sed | while read ID; do getport $ID; echo "$ID:$port"; done

  exit
}

connected () {
#  echo "these remote IDs are currently connected to the SSH server:"
  cat /etc/passwd | grep ^r[0-9]* | sed -n  's/.*\/home\/\(r[0-9][0-9][0-9][0-9]\).*/\1/p' | \
    while read ID; do getport $ID quiet; echo "$ID:$port"; done | sort | grep -v "not connected"
#  cat | grep | sed | while read ID; do getport $ID; echo "$ID:$port"; done

  exit
}

recover () {
  # SCP a new copy of 'loomaupdater' script to the remote Looma to recover loomaupdate functionality
    scp -q -P $port -i ~/.ssh/$ID-id_rsa loomaupdater 'odroid@127.0.0.1:/var/www/html/Looma/looma shell scripts/'
    echo "copied a new copy of 'loomaupdater' to $ID [result = $?"
}

access_by_port () {
  getID $port
  if [[ $ID = "not connected" ]]
  then
    echo "No remote is connected to port $port"
    exit
  fi
  ssh -p $port -i ~/.ssh/$ID-id_rsa odroid@127.0.0.1
  exit
}

access_by_ID () {
  validID $ID
  getport $ID
  if [[ $port = "not connected" ]]
  then
    echo "Remote $ID is not connected now"
    exit
  fi
  ssh -p $port -i ~/.ssh/$ID-id_rsa odroid@127.0.0.1
  exit
}

addremote () {
  validID $ID
  if [[ -f ReverseSSH-$ID-Client.sh ]]
  then
    rm ReverseSSH-$ID-Client.sh
  fi
  sudo  reversessh -a $ID
  exit
}

deleteremote () {
  validID $ID
  if [[ -f ReverseSSH-$ID-Client.sh ]]
  then
    rm ReverseSSH-$ID-Client.sh
  fi
  sudo reversessh -r $ID
  exit
}

case $1 in

  help | "")
    help
    ;;

  info)
    ID=$2
    info
    ;;

  ports)
    ports
    ;;

  remotes)
    remotes
    ;;

  connected)
    connected
    ;;

  recover)
    ID=$2
    recover
    ;;

  addremote)
    ID=$2
    addremote
    ;;

  deleteremote)
    ID=$2
    deleteremote
    ;;

  access)
    case $2 in

      port)
      port=$3
      access_by_port $port
      ;;

      *)
      ID=$2
      access_by_ID $ID
        ;;
    esac
    ;;

  *)
    help
    ;;
esac